ARP抑制：
      echo "1" >/proc/sys/net/ipv4/conf/lo/arp_ignore 
      echo "2" >/proc/sys/net/ipv4/conf/lo/arp_announce 
      echo "1" >/proc/sys/net/ipv4/conf/all/arp_ignore 
      echo "2" >/proc/sys/net/ipv4/conf/all/arp_announce 
arp_ignore：
定义对目标地址为本地IP的ARP询问不同的应答模式
0 - (默认值):回应任何网络接口，上对任何本地IP地址的arp查询请求。
1 - 只回答目标IP地址是来访网络接口本地地址的ARP查询请求。
2 - 只回答目标IP地址是来访网络接口本地地址的ARP查询请求，且来访IP必须在该网络接口的子网段内。
3 - 不回应该网络界面的arp请求，而只对设置的唯一和连接地址做出回应。
4 - 7 保留未使用。
8 - 不回应所有(本地地址)的arp查询。

arp_announce：
对网络接口上，本地IP地址的发出的，ARP回应，作出相应级别的限制:确定不同程度的限制,宣布对来自本地源IP地址发出Arp请求的接口
0 - (默认)在任意网络接口(eth0,eth1, lo). 上的任何本地地址
1 - 尽量避免不在该网络接口子网段的本地地址做出arp回应.当发起ARP请求的源IP地址是被设置应该经由路由达到此网络接口的时候很有用.此时会检查来访IP是否为所有接口上的子网段内ip之一。如果该来访IP不属于各个网络接口上的子网段内，那么将采用级别2的方式来进行处理.
2 -对查询目标使用最适当的本地地址，在此模式下将忽略这个IP数据包的源地址并尝试选择能与该地址通信的本地地址，首要是选择所有的网

keepalived.conf配置文件：

global_defs {
   router_id LVS_BigData_log
}

vrrp_instance VI_1 {
    state BACKUP	
    interface eth0
    virtual_router_id 81
    priority 200
    nopreempt
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        10.8.120.114
    }
}
virtual_server 10.8.120.114 7382 {    # 设置在虚拟IP上的服务
    delay_loop 6
    #lb_algo lc                       # 负载分担模式
    lb_algo sh
    lb_kind DR                       # LVS模式
#    persistence_timeout 50
    protocol UDP
 
    real_server 10.8.120.106 7382 {   # real server设置
        weight 1                   # real server权重
        #TCP_CHECK {
        #    connect_timeout 3
        #    nb_get_retry 3
        #    delay_before_retry 3
        #    connect_prot 7382
        #}
        MISC_CHECK {
            misc_path "/root/udp_check.sh 10.8.120.106 7382"
            misc_timeout 3
        }
    }
    real_server 10.8.120.107 7382 {
        weight 1
        #TCP_CHECK {
        #    connect_timeout 3
         #   nb_get_retry 3
         #   delay_before_retry 3
         #   connect_prot 7382
        #}
        MISC_CHECK {
            misc_path "/root/udp_check.sh 10.8.120.107 7382"
            misc_timeout 3
        }
    }
    real_server 10.8.120.108 7382 {
        weight 1
    #    TCP_CHECK {
    #        connect_timeout 3
    #        nb_get_retry 3
    #        delay_before_retry 3
    #        connect_prot 7382
    #    }
        MISC_CHECK {
            misc_path "/root/udp_check.sh 10.8.120.108 7382"
            misc_timeout 3
        }
    }
    real_server 10.8.120.109 7382 {
        weight 1
    #    TCP_CHECK {
    #        connect_timeout 3
    #        nb_get_retry 3
    #        delay_before_retry 3
    #        connect_prot 7382
    #    }
        MISC_CHECK {
            misc_path "/root/udp_check.sh 10.8.120.109 7382"
            misc_timeout 3
        }
    }
}
